{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst usePagination = (data, pageLimit, dataLimit, firstPage) => {\n  _s();\n\n  const pages = Math.round(data.length / dataLimit); // pageLimit: number of pagination we want to show\n  // dataLimit: number of page in one side\n\n  const [currentPage, setCurrentPage] = useState(1);\n  useEffect(() => {\n    window.scrollTo({\n      behavior: 'auto',\n      top: '0px'\n    });\n  }, [currentPage]);\n\n  const gotoNextPage = () => {\n    setCurrentPage(prevState => {\n      return prevState + 1;\n    });\n  };\n\n  const gotoPrevPage = () => {\n    setCurrentPage(prevState => {\n      return prevState - 1;\n    });\n  };\n\n  const changePage = event => {\n    const pageNumber = Number(event.target.textContent);\n    setCurrentPage(pageNumber);\n  };\n\n  const getPaginatedData = () => {\n    const startIndex = currentPage * dataLimit - dataLimit;\n    const endIndex = startIndex + dataLimit;\n    return data.slice(startIndex, endIndex);\n  };\n\n  const getPaginationGroup = () => {\n    const pageNumbers = [];\n\n    for (let i = 1; i <= Math.ceil(data.length / pageLimit); i++) {\n      pageNumbers.push(i);\n    } // let start = Math.floor((currentPage - 1) / pageLimit) * pageLimit;\n    // return new Array(pageLimit).fill().map((_, idx) => start + idx + 1);\n\n\n    return pageNumbers;\n  };\n\n  return {\n    nextPage: gotoNextPage,\n    prevPage: gotoPrevPage,\n    pages: getPaginatedData,\n    currentPage: currentPage,\n    paginationGroup: getPaginationGroup,\n    changeThePage: changePage,\n    ourPagesTotal: pages\n  };\n};\n\n_s(usePagination, \"GDYsIxij9y/ZFL42bMqqthZmeP4=\");\n\nexport default usePagination;","map":{"version":3,"sources":["/Users/hoanganh0722/Desktop/Web/gstorevn/src/components/hook/use-pagination.js"],"names":["useState","useEffect","usePagination","data","pageLimit","dataLimit","firstPage","pages","Math","round","length","currentPage","setCurrentPage","window","scrollTo","behavior","top","gotoNextPage","prevState","gotoPrevPage","changePage","event","pageNumber","Number","target","textContent","getPaginatedData","startIndex","endIndex","slice","getPaginationGroup","pageNumbers","i","ceil","push","nextPage","prevPage","paginationGroup","changeThePage","ourPagesTotal"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AACI,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,SAAP,EAAkBC,SAAlB,EAA6BC,SAA7B,KAA0C;AAAA;;AAChE,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWN,IAAI,CAACO,MAAL,GAAcL,SAAzB,CAAd,CADgE,CAEhE;AACA;;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,CAAD,CAA9C;AACAC,EAAAA,SAAS,CAAC,MAAK;AACXY,IAAAA,MAAM,CAACC,QAAP,CAAgB;AAACC,MAAAA,QAAQ,EAAE,MAAX;AAAmBC,MAAAA,GAAG,EAAE;AAAxB,KAAhB;AAEH,GAHQ,EAGN,CAACL,WAAD,CAHM,CAAT;;AAIA,QAAMM,YAAY,GAAG,MAAK;AACtBL,IAAAA,cAAc,CAACM,SAAS,IAAI;AACxB,aAAOA,SAAS,GAAG,CAAnB;AACH,KAFa,CAAd;AAGH,GAJD;;AAKA,QAAMC,YAAY,GAAG,MAAK;AACtBP,IAAAA,cAAc,CAACM,SAAS,IAAG;AACvB,aAAOA,SAAS,GAAG,CAAnB;AACH,KAFa,CAAd;AAGH,GAJD;;AAKA,QAAME,UAAU,GAAIC,KAAD,IAAU;AACzB,UAAMC,UAAU,GAAGC,MAAM,CAACF,KAAK,CAACG,MAAN,CAAaC,WAAd,CAAzB;AACAb,IAAAA,cAAc,CAACU,UAAD,CAAd;AACH,GAHD;;AAIA,QAAMI,gBAAgB,GAAG,MAAK;AAC1B,UAAMC,UAAU,GAAGhB,WAAW,GAAGN,SAAd,GAA0BA,SAA7C;AACA,UAAMuB,QAAQ,GAAGD,UAAU,GAAGtB,SAA9B;AACA,WAAOF,IAAI,CAAC0B,KAAL,CAAWF,UAAX,EAAuBC,QAAvB,CAAP;AACH,GAJD;;AAKA,QAAME,kBAAkB,GAAG,MAAK;AAC5B,UAAMC,WAAW,GAAG,EAApB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAIxB,IAAI,CAACyB,IAAL,CAAU9B,IAAI,CAACO,MAAL,GAAcN,SAAxB,CAApB,EAAwD4B,CAAC,EAAzD,EAA4D;AACxDD,MAAAA,WAAW,CAACG,IAAZ,CAAiBF,CAAjB;AACH,KAJ2B,CAK5B;AACA;;;AACA,WAAOD,WAAP;AACH,GARD;;AASA,SAAO;AACHI,IAAAA,QAAQ,EAAElB,YADP;AAEHmB,IAAAA,QAAQ,EAAEjB,YAFP;AAGHZ,IAAAA,KAAK,EAAEmB,gBAHJ;AAIHf,IAAAA,WAAW,EAAEA,WAJV;AAKH0B,IAAAA,eAAe,EAAEP,kBALd;AAMHQ,IAAAA,aAAa,EAAElB,UANZ;AAOHmB,IAAAA,aAAa,EAAEhC;AAPZ,GAAP;AASH,CA9CG;;GAAML,a;;AAgDV,eAAeA,aAAf","sourcesContent":["import  {useState, useEffect } from 'react';\n    const usePagination = (data, pageLimit, dataLimit, firstPage) =>{\n    const pages = Math.round(data.length / dataLimit);\n    // pageLimit: number of pagination we want to show\n    // dataLimit: number of page in one side\n    const [currentPage, setCurrentPage] = useState(1);\n    useEffect(() =>{\n        window.scrollTo({behavior: 'auto', top: '0px'});\n\n    }, [currentPage])\n    const gotoNextPage = () =>{\n        setCurrentPage(prevState => {\n            return prevState + 1;\n        })\n    }\n    const gotoPrevPage = () =>{\n        setCurrentPage(prevState =>{\n            return prevState - 1;\n        })\n    }\n    const changePage = (event) =>{\n        const pageNumber = Number(event.target.textContent);\n        setCurrentPage(pageNumber);\n    }\n    const getPaginatedData = () =>{\n        const startIndex = currentPage * dataLimit - dataLimit;\n        const endIndex = startIndex + dataLimit;\n        return data.slice(startIndex, endIndex);\n    }\n    const getPaginationGroup = () =>{\n        const pageNumbers = [];\n        for(let i = 1; i <= Math.ceil(data.length / pageLimit); i++){\n            pageNumbers.push(i);\n        }\n        // let start = Math.floor((currentPage - 1) / pageLimit) * pageLimit;\n        // return new Array(pageLimit).fill().map((_, idx) => start + idx + 1);\n        return pageNumbers;\n    }\n    return {\n        nextPage: gotoNextPage,\n        prevPage: gotoPrevPage,\n        pages: getPaginatedData,\n        currentPage: currentPage,\n        paginationGroup: getPaginationGroup,\n        changeThePage: changePage,\n        ourPagesTotal: pages\n    }\n}\n\nexport default usePagination;"]},"metadata":{},"sourceType":"module"}