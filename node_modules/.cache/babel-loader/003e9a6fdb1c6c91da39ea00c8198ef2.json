{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useCallback } from \"react\";\nconst initialState = {\n  data: null,\n  status: '',\n  error: null\n};\n\nconst httpReducer = (state, action) => {\n  switch (action.type) {\n    case 'PENDING':\n      return { ...state,\n        status: 'pending'\n      };\n\n    case 'COMPLETED':\n      return { ...state,\n        status: 'completed',\n        data: action.payload\n      };\n\n    case 'ERROR':\n      return { ...state,\n        status: 'error',\n        error: action.payload\n      };\n\n    case 'RESET_ERROR':\n      return { ...state,\n        error: null\n      };\n\n    case 'RESET':\n      {\n        return {\n          data: null\n        };\n      }\n\n    default:\n      return initialState;\n  }\n};\n\nconst useHttp = () => {\n  _s();\n\n  const [state, dispatch] = useReducer(httpReducer, initialState);\n  const fetchingDataHandler = useCallback(async getResponse => {\n    dispatch({\n      type: 'PENDING'\n    });\n\n    try {\n      const response = await fetch(getResponse.url, {\n        method: getResponse.method ? getResponse.method : 'GET',\n        body: getResponse.body ? JSON.stringify(getResponse.body) : null,\n        headers: getResponse.headers ? getResponse.headers : {}\n      });\n\n      if (!response.ok) {\n        throw new Error('something happened!');\n      }\n\n      const dataFetching = await response.json();\n      dispatch({\n        type: 'COMPLETED',\n        payload: dataFetching\n      });\n    } catch (err) {\n      dispatch({\n        type: 'ERROR',\n        payload: err.message\n      });\n    }\n  }, []);\n  const setAgainHandler = useCallback(() => {\n    dispatch({\n      type: 'RESET_ERROR'\n    });\n  }, []);\n  return { ...state,\n    fetchingDataHandler,\n    setAgainHandler\n  };\n};\n\n_s(useHttp, \"bHHF3rkV/uDqoxmwMWq/FMl6OBs=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/hoanganh0722/Desktop/Web/gstorevn/src/components/hook/use-http.js"],"names":["useReducer","useCallback","initialState","data","status","error","httpReducer","state","action","type","payload","useHttp","dispatch","fetchingDataHandler","getResponse","response","fetch","url","method","body","JSON","stringify","headers","ok","Error","dataFetching","json","err","message","setAgainHandler"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,OAAxC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,IADW;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAkB;AAClC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,SAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHH,QAAAA,MAAM,EAAE;AAFL,OAAP;;AAIJ,SAAK,WAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHH,QAAAA,MAAM,EAAE,WAFL;AAGHD,QAAAA,IAAI,EAAEK,MAAM,CAACE;AAHV,OAAP;;AAKJ,SAAK,OAAL;AACI,aAAM,EACF,GAAGH,KADD;AAEFH,QAAAA,MAAM,EAAE,OAFN;AAGFC,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAHZ,OAAN;;AAKJ,SAAK,aAAL;AACI,aAAO,EACH,GAAGH,KADA;AAEHF,QAAAA,KAAK,EAAE;AAFJ,OAAP;;AAIJ,SAAK,OAAL;AAAa;AACT,eAAO;AACHF,UAAAA,IAAI,EAAE;AADH,SAAP;AAIH;;AACD;AACI,aAAOD,YAAP;AA9BR;AAgCH,CAjCD;;AAkCA,MAAMS,OAAO,GAAG,MAAK;AAAA;;AACjB,QAAM,CAACJ,KAAD,EAAQK,QAAR,IAAoBZ,UAAU,CAACM,WAAD,EAAcJ,YAAd,CAApC;AAEA,QAAMW,mBAAmB,GAAGZ,WAAW,CAAC,MAAOa,WAAP,IAAsB;AAC1DF,IAAAA,QAAQ,CAAC;AACLH,MAAAA,IAAI,EAAE;AADD,KAAD,CAAR;;AAGA,QAAG;AACC,YAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACF,WAAW,CAACG,GAAb,EAAkB;AAC1CC,QAAAA,MAAM,EAAEJ,WAAW,CAACI,MAAZ,GAAqBJ,WAAW,CAACI,MAAjC,GAA0C,KADR;AAE1CC,QAAAA,IAAI,EAAEL,WAAW,CAACK,IAAZ,GAAmBC,IAAI,CAACC,SAAL,CAAeP,WAAW,CAACK,IAA3B,CAAnB,GAAsD,IAFlB;AAG1CG,QAAAA,OAAO,EAAGR,WAAW,CAACQ,OAAZ,GAAsBR,WAAW,CAACQ,OAAlC,GAA4C;AAHZ,OAAlB,CAA5B;;AAKA,UAAG,CAACP,QAAQ,CAACQ,EAAb,EAAgB;AACZ,cAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACH;;AACD,YAAMC,YAAY,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAA3B;AACAd,MAAAA,QAAQ,CAAC;AACLH,QAAAA,IAAI,EAAE,WADD;AAELC,QAAAA,OAAO,EAAEe;AAFJ,OAAD,CAAR;AAIH,KAdD,CAcC,OAAME,GAAN,EAAU;AACPf,MAAAA,QAAQ,CAAC;AACLH,QAAAA,IAAI,EAAE,OADD;AAELC,QAAAA,OAAO,EAAEiB,GAAG,CAACC;AAFR,OAAD,CAAR;AAIH;AACJ,GAxBsC,EAwBpC,EAxBoC,CAAvC;AAyBA,QAAMC,eAAe,GAAG5B,WAAW,CAAC,MAAK;AACrCW,IAAAA,QAAQ,CAAC;AACLH,MAAAA,IAAI,EAAE;AADD,KAAD,CAAR;AAGH,GAJkC,EAIhC,EAJgC,CAAnC;AAKA,SAAO,EACH,GAAGF,KADA;AAEHM,IAAAA,mBAFG;AAGHgB,IAAAA;AAHG,GAAP;AAKH,CAtCD;;GAAMlB,O;;AAwCN,eAAeA,OAAf","sourcesContent":["import { useReducer, useCallback } from \"react\";\n\nconst initialState = {\n    data: null,\n    status: '',\n    error: null\n}\n\nconst httpReducer = (state, action) =>{\n    switch(action.type){\n        case 'PENDING':\n            return {\n                ...state,\n                status: 'pending'\n            }\n        case 'COMPLETED':\n            return {\n                ...state,\n                status: 'completed',\n                data: action.payload\n            }\n        case 'ERROR':\n            return{\n                ...state,\n                status: 'error',\n                error: action.payload\n            }\n        case 'RESET_ERROR':\n            return {\n                ...state,\n                error: null\n            }\n        case 'RESET':{\n            return {\n                data: null,\n                \n            }\n        }\n        default:\n            return initialState;\n    }\n}\nconst useHttp = () =>{\n    const [state, dispatch] = useReducer(httpReducer, initialState);\n    \n    const fetchingDataHandler = useCallback(async (getResponse) =>{\n        dispatch({\n            type: 'PENDING'\n        })\n        try{\n            const response = await fetch(getResponse.url, {\n                method: getResponse.method ? getResponse.method : 'GET',\n                body: getResponse.body ? JSON.stringify(getResponse.body) : null,\n                headers : getResponse.headers ? getResponse.headers : {}\n            });\n            if(!response.ok){\n                throw new Error('something happened!');\n            }\n            const dataFetching = await response.json();\n            dispatch({\n                type: 'COMPLETED',\n                payload: dataFetching\n            })\n        }catch(err){\n            dispatch({\n                type: 'ERROR',\n                payload: err.message\n            })\n        }\n    }, [])\n    const setAgainHandler = useCallback(() =>{\n        dispatch({\n            type: 'RESET_ERROR'\n        })\n    }, []);\n    return {\n        ...state,\n        fetchingDataHandler,\n        setAgainHandler\n    }\n}\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}