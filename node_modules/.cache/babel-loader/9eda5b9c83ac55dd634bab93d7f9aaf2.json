{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst changePostInitialState = {\n  information: null,\n  status: 'pending'\n};\nconst changePostSlice = createSlice({\n  name: 'change-post',\n  initialState: changePostInitialState,\n  reducers: {\n    updateInformation(state, action) {\n      state.information = action.payload;\n      console.log(state.information);\n    },\n\n    updateImages(state, action) {\n      state.image1 = action.payload[0];\n      state.image2 = action.payload[1];\n      state.image3 = action.payload[2];\n    },\n\n    updateStatus(state, action) {\n      state.status = action.payload;\n    },\n\n    updateTitle(state, action) {\n      state.information.title = action.payload;\n    },\n\n    updateContent1(state, action) {\n      state.information.content1 = action.payload;\n    },\n\n    updateContent2(state, action) {\n      state.information.content2 = action.payload;\n    },\n\n    updateContent3(state, action) {\n      state.information.content3 = action.payload;\n    }\n\n  }\n});\nexport const fetchingPosts = id => {\n  return dispatch => {\n    dispatch(changePostActions.updateStatus('pending'));\n    fetch(`http://localhost:3001/get-post/${id}`).then(response => response.json()).then(data => {\n      dispatch(changePostActions.updateStatus('success'));\n      dispatch(changePostActions.updateInformation(data));\n    }).catch(err => {\n      dispatch(changePostActions.updateStatus('error'));\n    });\n  };\n};\nexport const changePostActions = changePostSlice.actions;\nexport default changePostSlice;","map":{"version":3,"sources":["/Users/hoanganh0722/Desktop/Web/gstorevn/src/components/redux-store/change-post.js"],"names":["createSlice","changePostInitialState","information","status","changePostSlice","name","initialState","reducers","updateInformation","state","action","payload","console","log","updateImages","image1","image2","image3","updateStatus","updateTitle","title","updateContent1","content1","updateContent2","content2","updateContent3","content3","fetchingPosts","id","dispatch","changePostActions","fetch","then","response","json","data","catch","err","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,sBAAsB,GAAG;AAC3BC,EAAAA,WAAW,EAAE,IADc;AAE3BC,EAAAA,MAAM,EAAE;AAFmB,CAA/B;AAIA,MAAMC,eAAe,GAAGJ,WAAW,CAAC;AAChCK,EAAAA,IAAI,EAAE,aAD0B;AAEhCC,EAAAA,YAAY,EAAEL,sBAFkB;AAGhCM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,iBAAiB,CAACC,KAAD,EAAQC,MAAR,EAAe;AAC5BD,MAAAA,KAAK,CAACP,WAAN,GAAoBQ,MAAM,CAACC,OAA3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACP,WAAlB;AACH,KAJK;;AAKNY,IAAAA,YAAY,CAACL,KAAD,EAAQC,MAAR,EAAe;AACvBD,MAAAA,KAAK,CAACM,MAAN,GAAeL,MAAM,CAACC,OAAP,CAAe,CAAf,CAAf;AACAF,MAAAA,KAAK,CAACO,MAAN,GAAeN,MAAM,CAACC,OAAP,CAAe,CAAf,CAAf;AACAF,MAAAA,KAAK,CAACQ,MAAN,GAAeP,MAAM,CAACC,OAAP,CAAe,CAAf,CAAf;AACH,KATK;;AAUNO,IAAAA,YAAY,CAACT,KAAD,EAAQC,MAAR,EAAe;AACvBD,MAAAA,KAAK,CAACN,MAAN,GAAeO,MAAM,CAACC,OAAtB;AACH,KAZK;;AAaNQ,IAAAA,WAAW,CAACV,KAAD,EAAQC,MAAR,EAAe;AACtBD,MAAAA,KAAK,CAACP,WAAN,CAAkBkB,KAAlB,GAA0BV,MAAM,CAACC,OAAjC;AACH,KAfK;;AAgBNU,IAAAA,cAAc,CAACZ,KAAD,EAAQC,MAAR,EAAe;AACzBD,MAAAA,KAAK,CAACP,WAAN,CAAkBoB,QAAlB,GAA6BZ,MAAM,CAACC,OAApC;AACH,KAlBK;;AAmBNY,IAAAA,cAAc,CAACd,KAAD,EAAQC,MAAR,EAAe;AACzBD,MAAAA,KAAK,CAACP,WAAN,CAAkBsB,QAAlB,GAA6Bd,MAAM,CAACC,OAApC;AACH,KArBK;;AAsBNc,IAAAA,cAAc,CAAChB,KAAD,EAAQC,MAAR,EAAe;AACzBD,MAAAA,KAAK,CAACP,WAAN,CAAkBwB,QAAlB,GAA6BhB,MAAM,CAACC,OAApC;AACH;;AAxBK;AAHsB,CAAD,CAAnC;AA+BA,OAAO,MAAMgB,aAAa,GAAIC,EAAD,IAAO;AAChC,SAAQC,QAAD,IAAa;AAChBA,IAAAA,QAAQ,CAACC,iBAAiB,CAACZ,YAAlB,CAA+B,SAA/B,CAAD,CAAR;AACAa,IAAAA,KAAK,CAAE,kCAAiCH,EAAG,EAAtC,CAAL,CAA8CI,IAA9C,CAAmDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAA/D,EACCF,IADD,CACMG,IAAI,IAAG;AACTN,MAAAA,QAAQ,CAACC,iBAAiB,CAACZ,YAAlB,CAA+B,SAA/B,CAAD,CAAR;AACAW,MAAAA,QAAQ,CAACC,iBAAiB,CAACtB,iBAAlB,CAAoC2B,IAApC,CAAD,CAAR;AACH,KAJD,EAIGC,KAJH,CAISC,GAAG,IAAG;AACXR,MAAAA,QAAQ,CAACC,iBAAiB,CAACZ,YAAlB,CAA+B,OAA/B,CAAD,CAAR;AACH,KAND;AAOH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMY,iBAAiB,GAAG1B,eAAe,CAACkC,OAA1C;AACP,eAAelC,eAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst changePostInitialState = {\n    information: null,\n    status: 'pending',\n}\nconst changePostSlice = createSlice({\n    name: 'change-post',\n    initialState: changePostInitialState,\n    reducers: {\n        updateInformation(state, action){\n            state.information = action.payload\n            console.log(state.information);\n        },\n        updateImages(state, action){\n            state.image1 = action.payload[0];\n            state.image2 = action.payload[1];\n            state.image3 = action.payload[2];\n        },\n        updateStatus(state, action){\n            state.status = action.payload\n        },\n        updateTitle(state, action){\n            state.information.title = action.payload\n        },\n        updateContent1(state, action){\n            state.information.content1 = action.payload\n        },\n        updateContent2(state, action){\n            state.information.content2 = action.payload\n        },\n        updateContent3(state, action){\n            state.information.content3 = action.payload\n        }\n    }\n})\n\nexport const fetchingPosts = (id) =>{\n    return (dispatch) =>{\n        dispatch(changePostActions.updateStatus('pending'));\n        fetch(`http://localhost:3001/get-post/${id}`).then(response => response.json())\n        .then(data =>{\n            dispatch(changePostActions.updateStatus('success'));\n            dispatch(changePostActions.updateInformation(data));\n        }).catch(err =>{\n            dispatch(changePostActions.updateStatus('error'))\n        })\n    }\n}\n\nexport const changePostActions = changePostSlice.actions;\nexport default changePostSlice;"]},"metadata":{},"sourceType":"module"}