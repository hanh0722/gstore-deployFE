{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\n\nconst usePagination = (data, pageLimit, dataLimit) => {\n  _s();\n\n  const [pages] = useState(Math.round(data.length / dataLimit));\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const gotoNextPage = () => {\n    setCurrentPage(prevState => {\n      return prevState + 1;\n    });\n  };\n\n  const gotoPrevPage = () => {\n    setCurrentPage(prevState => {\n      return prevState - 1;\n    });\n  };\n\n  const changePage = event => {\n    const pageNumber = Number(event.target.textContent);\n    setCurrentPage(pageNumber);\n  };\n\n  const getPaginatedData = () => {\n    const startIndex = currentPage * dataLimit - dataLimit;\n    const endIndex = startIndex + dataLimit;\n    return data.slice(startIndex, endIndex);\n  };\n\n  const getPaginationGroup = () => {\n    let start = Math.floor((currentPage - 1) / pageLimit) * pageLimit;\n    return new Array(pageLimit).fill().map((_, idx) => start + idx + 1);\n  };\n\n  return {\n    nextPage: gotoNextPage,\n    prevPage: gotoPrevPage,\n    pages: getPaginatedData,\n    currentPage: currentPage,\n    paginationGroup: getPaginationGroup,\n    changeThePage: changePage,\n    ourPages: pages\n  };\n};\n\n_s(usePagination, \"TAuAHIRT/chsJ5y/NrRj9/numrE=\");\n\nexport default usePagination;","map":{"version":3,"sources":["/Users/hoanganh0722/Desktop/Web/gstorevn/src/components/hook/use-pagination.js"],"names":["React","useState","usePagination","data","pageLimit","dataLimit","pages","Math","round","length","currentPage","setCurrentPage","gotoNextPage","prevState","gotoPrevPage","changePage","event","pageNumber","Number","target","textContent","getPaginatedData","startIndex","endIndex","slice","getPaginationGroup","start","floor","Array","fill","map","_","idx","nextPage","prevPage","paginationGroup","changeThePage","ourPages"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,SAAP,EAAkBC,SAAlB,KAA+B;AAAA;;AACjD,QAAM,CAACC,KAAD,IAAUL,QAAQ,CAACM,IAAI,CAACC,KAAL,CAAWL,IAAI,CAACM,MAAL,GAAcJ,SAAzB,CAAD,CAAxB;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,CAAD,CAA9C;;AACA,QAAMW,YAAY,GAAG,MAAK;AACtBD,IAAAA,cAAc,CAACE,SAAS,IAAI;AACxB,aAAOA,SAAS,GAAG,CAAnB;AACH,KAFa,CAAd;AAGH,GAJD;;AAKA,QAAMC,YAAY,GAAG,MAAK;AACtBH,IAAAA,cAAc,CAACE,SAAS,IAAG;AACvB,aAAOA,SAAS,GAAG,CAAnB;AACH,KAFa,CAAd;AAGH,GAJD;;AAKA,QAAME,UAAU,GAAIC,KAAD,IAAU;AACzB,UAAMC,UAAU,GAAGC,MAAM,CAACF,KAAK,CAACG,MAAN,CAAaC,WAAd,CAAzB;AACAT,IAAAA,cAAc,CAACM,UAAD,CAAd;AACH,GAHD;;AAIA,QAAMI,gBAAgB,GAAG,MAAK;AAC1B,UAAMC,UAAU,GAAGZ,WAAW,GAAGL,SAAd,GAA0BA,SAA7C;AACA,UAAMkB,QAAQ,GAAGD,UAAU,GAAGjB,SAA9B;AACA,WAAOF,IAAI,CAACqB,KAAL,CAAWF,UAAX,EAAuBC,QAAvB,CAAP;AACH,GAJD;;AAKA,QAAME,kBAAkB,GAAG,MAAK;AAC5B,QAAIC,KAAK,GAAGnB,IAAI,CAACoB,KAAL,CAAW,CAACjB,WAAW,GAAG,CAAf,IAAoBN,SAA/B,IAA4CA,SAAxD;AACA,WAAO,IAAIwB,KAAJ,CAAUxB,SAAV,EAAqByB,IAArB,GAA4BC,GAA5B,CAAgC,CAACC,CAAD,EAAIC,GAAJ,KAAYN,KAAK,GAAGM,GAAR,GAAc,CAA1D,CAAP;AACH,GAHD;;AAIA,SAAO;AACHC,IAAAA,QAAQ,EAAErB,YADP;AAEHsB,IAAAA,QAAQ,EAAEpB,YAFP;AAGHR,IAAAA,KAAK,EAAEe,gBAHJ;AAIHX,IAAAA,WAAW,EAAEA,WAJV;AAKHyB,IAAAA,eAAe,EAAEV,kBALd;AAMHW,IAAAA,aAAa,EAAErB,UANZ;AAOHsB,IAAAA,QAAQ,EAAE/B;AAPP,GAAP;AASH,CAnCD;;GAAMJ,a;;AAqCN,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst usePagination = (data, pageLimit, dataLimit) =>{\n    const [pages] = useState(Math.round(data.length / dataLimit));\n    const [currentPage, setCurrentPage] = useState(1);\n    const gotoNextPage = () =>{\n        setCurrentPage(prevState => {\n            return prevState + 1;\n        })\n    }\n    const gotoPrevPage = () =>{\n        setCurrentPage(prevState =>{\n            return prevState - 1;\n        })\n    }\n    const changePage = (event) =>{\n        const pageNumber = Number(event.target.textContent);\n        setCurrentPage(pageNumber);\n    }\n    const getPaginatedData = () =>{\n        const startIndex = currentPage * dataLimit - dataLimit;\n        const endIndex = startIndex + dataLimit;\n        return data.slice(startIndex, endIndex);\n    }\n    const getPaginationGroup = () =>{\n        let start = Math.floor((currentPage - 1) / pageLimit) * pageLimit;\n        return new Array(pageLimit).fill().map((_, idx) => start + idx + 1);\n    }\n    return {\n        nextPage: gotoNextPage,\n        prevPage: gotoPrevPage,\n        pages: getPaginatedData,\n        currentPage: currentPage,\n        paginationGroup: getPaginationGroup,\n        changeThePage: changePage,\n        ourPages: pages\n    }\n}\n\nexport default usePagination;"]},"metadata":{},"sourceType":"module"}