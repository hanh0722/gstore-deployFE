{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nconst initialState = {\n  data: null,\n  status: ''\n};\n\nconst httpReducer = (state, action) => {\n  switch (action.type) {\n    case 'PENDING':\n      return { ...state,\n        status: 'pending'\n      };\n\n    case 'COMPLETED':\n      return {\n        status: 'completed',\n        data: action.payload\n      };\n\n    case 'ERROR':\n      return {\n        status: 'error',\n        data: action.payload\n      };\n\n    default:\n      return initialState;\n  }\n};\n\nconst useHttp = getResponse => {\n  _s();\n\n  const [state, dispatch] = useReducer(httpReducer, initialState);\n  const fetchingDataHandler = useCallback(async () => {\n    dispatch({\n      type: 'PENDING'\n    });\n\n    try {\n      const response = await fetch(getResponse.url, {\n        method: getResponse.method ? getResponse.method : 'GET',\n        body: getResponse.body ? JSON.stringify(getResponse.body) : null,\n        headers: getResponse.headers ? getResponse.headers : {}\n      });\n\n      if (!response.ok) {\n        throw new Error('something happened!');\n      }\n\n      const dataFetching = await response.json();\n      dispatch({\n        type: 'COMPLETED',\n        payload: dataFetching\n      });\n    } catch (err) {\n      dispatch({\n        type: 'ERROR',\n        payload: err\n      });\n    }\n  }, []);\n  return { ...state,\n    fetchingDataHandler\n  };\n};\n\n_s(useHttp, \"MM86SPjefggDEmYK7tT8ntZv8jM=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/hoanganh0722/Desktop/Web/gstorevn/src/components/hook/use-http.js"],"names":["useReducer","initialState","data","status","httpReducer","state","action","type","payload","useHttp","getResponse","dispatch","fetchingDataHandler","useCallback","response","fetch","url","method","body","JSON","stringify","headers","ok","Error","dataFetching","json","err"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,IADW;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAArB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAkB;AAClC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,SAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHF,QAAAA,MAAM,EAAE;AAFL,OAAP;;AAIJ,SAAK,WAAL;AACI,aAAO;AACHA,QAAAA,MAAM,EAAE,WADL;AAEHD,QAAAA,IAAI,EAAEI,MAAM,CAACE;AAFV,OAAP;;AAIJ,SAAK,OAAL;AACI,aAAM;AACFL,QAAAA,MAAM,EAAE,OADN;AAEFD,QAAAA,IAAI,EAAEI,MAAM,CAACE;AAFX,OAAN;;AAIJ;AACI,aAAOP,YAAP;AAjBR;AAmBH,CApBD;;AAqBA,MAAMQ,OAAO,GAAIC,WAAD,IAAgB;AAAA;;AAC5B,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBX,UAAU,CAACI,WAAD,EAAcH,YAAd,CAApC;AAEA,QAAMW,mBAAmB,GAAGC,WAAW,CAAC,YAAW;AAC/CF,IAAAA,QAAQ,CAAC;AACLJ,MAAAA,IAAI,EAAE;AADD,KAAD,CAAR;;AAGA,QAAG;AACC,YAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACL,WAAW,CAACM,GAAb,EAAkB;AAC1CC,QAAAA,MAAM,EAAEP,WAAW,CAACO,MAAZ,GAAqBP,WAAW,CAACO,MAAjC,GAA0C,KADR;AAE1CC,QAAAA,IAAI,EAAER,WAAW,CAACQ,IAAZ,GAAmBC,IAAI,CAACC,SAAL,CAAeV,WAAW,CAACQ,IAA3B,CAAnB,GAAsD,IAFlB;AAG1CG,QAAAA,OAAO,EAAEX,WAAW,CAACW,OAAZ,GAAsBX,WAAW,CAACW,OAAlC,GAA4C;AAHX,OAAlB,CAA5B;;AAKA,UAAG,CAACP,QAAQ,CAACQ,EAAb,EAAgB;AACZ,cAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACH;;AACD,YAAMC,YAAY,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAA3B;AACAd,MAAAA,QAAQ,CAAC;AACLJ,QAAAA,IAAI,EAAE,WADD;AAELC,QAAAA,OAAO,EAAEgB;AAFJ,OAAD,CAAR;AAIH,KAdD,CAcC,OAAME,GAAN,EAAU;AACPf,MAAAA,QAAQ,CAAC;AACLJ,QAAAA,IAAI,EAAE,OADD;AAELC,QAAAA,OAAO,EAAEkB;AAFJ,OAAD,CAAR;AAIH;AACJ,GAxBsC,EAwBpC,EAxBoC,CAAvC;AAyBA,SAAO,EACH,GAAGrB,KADA;AAEHO,IAAAA;AAFG,GAAP;AAIH,CAhCD;;GAAMH,O;;AAkCN,eAAeA,OAAf","sourcesContent":["import { useReducer } from \"react\";\n\nconst initialState = {\n    data: null,\n    status: ''\n}\n\nconst httpReducer = (state, action) =>{\n    switch(action.type){\n        case 'PENDING':\n            return {\n                ...state,\n                status: 'pending'\n            }\n        case 'COMPLETED':\n            return {\n                status: 'completed',\n                data: action.payload\n            }\n        case 'ERROR':\n            return{\n                status: 'error',\n                data: action.payload\n            }\n        default:\n            return initialState;\n    }\n}\nconst useHttp = (getResponse) =>{\n    const [state, dispatch] = useReducer(httpReducer, initialState);\n    \n    const fetchingDataHandler = useCallback(async () =>{\n        dispatch({\n            type: 'PENDING'\n        })\n        try{\n            const response = await fetch(getResponse.url, {\n                method: getResponse.method ? getResponse.method : 'GET',\n                body: getResponse.body ? JSON.stringify(getResponse.body) : null,\n                headers: getResponse.headers ? getResponse.headers : {}\n            });\n            if(!response.ok){\n                throw new Error('something happened!');\n            }\n            const dataFetching = await response.json();\n            dispatch({\n                type: 'COMPLETED',\n                payload: dataFetching\n            })\n        }catch(err){\n            dispatch({\n                type: 'ERROR',\n                payload: err\n            })\n        }\n    }, [])\n    return {\n        ...state,\n        fetchingDataHandler\n    }\n}\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}