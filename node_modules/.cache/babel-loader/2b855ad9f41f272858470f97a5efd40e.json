{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialStateLayout = {\n  isClicked: false,\n  isDownloaded: false\n};\nconst layoutSlice = createSlice({\n  name: \"layout\",\n  initialState: initialStateLayout,\n  reducers: {\n    toggleLayout(state) {\n      state.isClicked = !state.isClicked;\n    },\n\n    toggleDownload(state) {\n      state.isDownloaded = !state.isDownloaded;\n    }\n\n  }\n});\nconst initialStateSignIn = {\n  isSignedIn: false,\n  information: {},\n  id: null\n};\nconst signInSlice = createSlice({\n  name: \"signin\",\n  initialState: initialStateSignIn,\n  reducers: {\n    SignIn(state, action) {\n      state.isSignedIn = true;\n      state.id = action.payload;\n    },\n\n    SignOut(state) {\n      state.isSignedIn = false;\n    },\n\n    Information(state, action) {\n      state.information = action.payload;\n    }\n\n  }\n});\nexport const adminInformation = () => {\n  return dispatch => {\n    const id = localStorage.getItem('isSignedIn');\n    console.log(id);\n\n    if (id === null) {\n      console.log('no id!');\n      return;\n    }\n\n    fetch(`http://localhost:3001/admin/${+id}`).then(response => response.json()).then(data => {\n      dispatch(signInActions.Information(data));\n    });\n  };\n};\nexport const layoutActions = layoutSlice.actions;\nexport const signInActions = signInSlice.actions;\nconst store = configureStore({\n  reducer: {\n    layout: layoutSlice.reducer,\n    signin: signInSlice.reducer\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/hoanganh0722/Desktop/Web/gstorevn/src/components/redux-store/Store.js"],"names":["createSlice","configureStore","initialStateLayout","isClicked","isDownloaded","layoutSlice","name","initialState","reducers","toggleLayout","state","toggleDownload","initialStateSignIn","isSignedIn","information","id","signInSlice","SignIn","action","payload","SignOut","Information","adminInformation","dispatch","localStorage","getItem","console","log","fetch","then","response","json","data","signInActions","layoutActions","actions","store","reducer","layout","signin"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AACA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,SAAS,EAAE,KADc;AAEzBC,EAAAA,YAAY,EAAE;AAFW,CAA3B;AAKA,MAAMC,WAAW,GAAGL,WAAW,CAAC;AAC9BM,EAAAA,IAAI,EAAE,QADwB;AAE9BC,EAAAA,YAAY,EAAEL,kBAFgB;AAG9BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,CAACC,KAAD,EAAQ;AAClBA,MAAAA,KAAK,CAACP,SAAN,GAAkB,CAACO,KAAK,CAACP,SAAzB;AACD,KAHO;;AAIRQ,IAAAA,cAAc,CAACD,KAAD,EAAQ;AACpBA,MAAAA,KAAK,CAACN,YAAN,GAAqB,CAACM,KAAK,CAACN,YAA5B;AACD;;AANO;AAHoB,CAAD,CAA/B;AAaA,MAAMQ,kBAAkB,GAAG;AACzBC,EAAAA,UAAU,EAAE,KADa;AAEzBC,EAAAA,WAAW,EAAE,EAFY;AAGzBC,EAAAA,EAAE,EAAE;AAHqB,CAA3B;AAKA,MAAMC,WAAW,GAAGhB,WAAW,CAAC;AAC9BM,EAAAA,IAAI,EAAE,QADwB;AAE9BC,EAAAA,YAAY,EAAEK,kBAFgB;AAG9BJ,EAAAA,QAAQ,EAAE;AACRS,IAAAA,MAAM,CAACP,KAAD,EAAQQ,MAAR,EAAgB;AACpBR,MAAAA,KAAK,CAACG,UAAN,GAAmB,IAAnB;AACAH,MAAAA,KAAK,CAACK,EAAN,GAAWG,MAAM,CAACC,OAAlB;AACD,KAJO;;AAKRC,IAAAA,OAAO,CAACV,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACG,UAAN,GAAmB,KAAnB;AACD,KAPO;;AAQRQ,IAAAA,WAAW,CAACX,KAAD,EAAQQ,MAAR,EAAe;AACxBR,MAAAA,KAAK,CAACI,WAAN,GAAoBI,MAAM,CAACC,OAA3B;AACD;;AAVO;AAHoB,CAAD,CAA/B;AAiBA,OAAO,MAAMG,gBAAgB,GAAG,MAAK;AACnC,SAAQC,QAAD,IAAa;AAClB,UAAMR,EAAE,GAAGS,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYZ,EAAZ;;AACA,QAAGA,EAAE,KAAK,IAAV,EAAe;AACbW,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA;AACD;;AACDC,IAAAA,KAAK,CAAE,+BAA8B,CAACb,EAAG,EAApC,CAAL,CAA4Cc,IAA5C,CAAiDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAA7D,EACCF,IADD,CACMG,IAAI,IAAG;AACXT,MAAAA,QAAQ,CAACU,aAAa,CAACZ,WAAd,CAA0BW,IAA1B,CAAD,CAAR;AACD,KAHD;AAID,GAXD;AAYD,CAbM;AAcP,OAAO,MAAME,aAAa,GAAG7B,WAAW,CAAC8B,OAAlC;AACP,OAAO,MAAMF,aAAa,GAAGjB,WAAW,CAACmB,OAAlC;AACP,MAAMC,KAAK,GAAGnC,cAAc,CAAC;AAC3BoC,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAEjC,WAAW,CAACgC,OADb;AAEPE,IAAAA,MAAM,EAAEvB,WAAW,CAACqB;AAFb;AADkB,CAAD,CAA5B;AAOA,eAAeD,KAAf","sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialStateLayout = {\n  isClicked: false,\n  isDownloaded: false,\n};\n\nconst layoutSlice = createSlice({\n  name: \"layout\",\n  initialState: initialStateLayout,\n  reducers: {\n    toggleLayout(state) {\n      state.isClicked = !state.isClicked;\n    },\n    toggleDownload(state) {\n      state.isDownloaded = !state.isDownloaded;\n    },\n  },\n});\n\nconst initialStateSignIn = {\n  isSignedIn: false,\n  information: {},\n  id: null\n};\nconst signInSlice = createSlice({\n  name: \"signin\",\n  initialState: initialStateSignIn,\n  reducers: {\n    SignIn(state, action) {\n      state.isSignedIn = true;\n      state.id = action.payload\n    },\n    SignOut(state) {\n      state.isSignedIn = false;\n    },\n    Information(state, action){\n      state.information = action.payload\n    },\n  },\n});\n\nexport const adminInformation = () =>{\n  return (dispatch) =>{\n    const id = localStorage.getItem('isSignedIn');\n    console.log(id)\n    if(id === null){\n      console.log('no id!')\n      return;\n    }\n    fetch(`http://localhost:3001/admin/${+id}`).then(response => response.json())\n    .then(data =>{\n      dispatch(signInActions.Information(data));\n    })\n  }\n}\nexport const layoutActions = layoutSlice.actions;\nexport const signInActions = signInSlice.actions;\nconst store = configureStore({\n  reducer: {\n    layout: layoutSlice.reducer,\n    signin: signInSlice.reducer,\n  },\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}