{"ast":null,"code":"var _jsxFileName = \"/Users/hoanganh0722/Desktop/Web/gstorevn/src/components/Dashboard/ChangingPost/UI/FieldSet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"./FieldSet.module.scss\";\nimport TextArea from \"./Input/TextArea\";\nimport { useLocation, Redirect } from \"react-router-dom\";\nimport Dropzone from \"./Dropzone/Dropzone\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchingPosts } from \"../../../redux-store/change-post\";\nimport Loading from \"../../../../UI/Loading/Loading\";\nimport { changePostActions } from \"../../../redux-store/change-post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FieldSet = props => {\n  _s();\n\n  const [isTouched, setIsTouched] = useState(false);\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const id = params.get(\"id\");\n  const status = useSelector(state => state.post.status);\n  const data = useSelector(state => state.post.information);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchingPosts(id));\n  }, [id, dispatch]);\n  let array = [];\n\n  if (data) {\n    array.push(data.image1);\n    array.push(data.image2);\n    array.push(data.image3);\n  }\n\n  console.log(data);\n\n  const setIsTouchedHandler = () => {\n    setIsTouched(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [status === \"pending\" && !data && /*#__PURE__*/_jsxDEV(Loading, {\n      className: styles[\"loading-spinner\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), status === \"error\" && !data && /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/404\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 39\n    }, this), status === \"success\" && data && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.form,\n      children: [/*#__PURE__*/_jsxDEV(TextArea, {\n        textField: {\n          variant: \"outlined\",\n          label: \"Tiêu Đề\",\n          placeholder: \"Tiêu đề trang\",\n          multiline: true,\n          defaultValue: data.title,\n          onChange: event => dispatch(changePostActions.updateTitle(event.target.value)),\n          onBlur: setIsTouchedHandler,\n          error: data.title.trim().length === 0 && isTouched\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), data.title.trim().length === 0 && isTouched && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.error,\n        children: \"Ti\\xEAu \\u0111\\u1EC1 kh\\xF4ng \\u0111\\u01B0\\u1EE3c \\u0111\\u1EC3 tr\\u1ED1ng\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 59\n      }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n        textField: {\n          label: \"Nội Dung 1\",\n          placeholder: \"Nội dung trong trang\",\n          variant: \"outlined\",\n          multiline: true,\n          defaultValue: data.content1,\n          onChange: event => dispatch(changePostActions.updateContent1(event.target.value))\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n        textField: {\n          variant: \"outlined\",\n          label: \"Nội Dung 2\",\n          placeholder: \"Nội dung trong trang\",\n          multiline: true,\n          defaultValue: data.content2,\n          onChange: event => dispatch(changePostActions.updateContent2(event.target.value))\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n        textField: {\n          variant: \"outlined\",\n          label: \"Nội Dung 3\",\n          placeholder: \"Nội dung trong trang\",\n          multiline: true,\n          defaultValue: data.content3,\n          onChange: event => dispatch(changePostActions.updateContent3(event.target.value))\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Dropzone, {\n          array: array,\n          uploadNewImages: props.setNewImages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FieldSet, \"bx70rZFVP/Rpgpgcx9lmyZFY8ww=\", false, function () {\n  return [useLocation, useSelector, useSelector, useDispatch];\n});\n\n_c = FieldSet;\nexport default FieldSet;\n\nvar _c;\n\n$RefreshReg$(_c, \"FieldSet\");","map":{"version":3,"sources":["/Users/hoanganh0722/Desktop/Web/gstorevn/src/components/Dashboard/ChangingPost/UI/FieldSet.js"],"names":["React","useEffect","useState","styles","TextArea","useLocation","Redirect","Dropzone","useDispatch","useSelector","fetchingPosts","Loading","changePostActions","FieldSet","props","isTouched","setIsTouched","location","params","URLSearchParams","search","id","get","status","state","post","data","information","dispatch","array","push","image1","image2","image3","console","log","setIsTouchedHandler","form","variant","label","placeholder","multiline","defaultValue","title","onChange","event","updateTitle","target","value","onBlur","error","trim","length","content1","updateContent1","content2","updateContent2","content3","updateContent3","setNewImages"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styles from \"./FieldSet.module.scss\";\nimport TextArea from \"./Input/TextArea\";\nimport { useLocation, Redirect } from \"react-router-dom\";\nimport Dropzone from \"./Dropzone/Dropzone\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchingPosts } from \"../../../redux-store/change-post\";\nimport Loading from \"../../../../UI/Loading/Loading\";\nimport { changePostActions } from \"../../../redux-store/change-post\";\nconst FieldSet = (props) => {\n  const [isTouched, setIsTouched] = useState(false);\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const id = params.get(\"id\");\n  const status = useSelector((state) => state.post.status);\n  const data = useSelector((state) => state.post.information);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchingPosts(id));\n  }, [id, dispatch]);\n  let array = [];\n  if(data){\n    array.push(data.image1);\n    array.push(data.image2);\n    array.push(data.image3);\n  }\n  console.log(data);\n  const setIsTouchedHandler = () =>{\n    setIsTouched(true);\n  }\n  return (\n    <>\n      {status === \"pending\" && !data && (\n        <Loading className={styles[\"loading-spinner\"]} />\n      )}\n      {status === \"error\" && !data && <Redirect to=\"/404\" />}\n      {status === \"success\" && data && (\n        <div className={styles.form}>\n          <TextArea\n            textField={{\n              variant: \"outlined\",\n              label: \"Tiêu Đề\",\n              placeholder: \"Tiêu đề trang\",\n              multiline: true,\n              defaultValue: data.title,\n              onChange: (event) => dispatch(changePostActions.updateTitle(event.target.value)),\n              onBlur: setIsTouchedHandler,\n              error: data.title.trim().length === 0 && isTouched\n            }}\n          />\n          {data.title.trim().length === 0 && isTouched && <p className={styles.error}>Tiêu đề không được để trống</p>}\n          <TextArea\n            textField={{\n              label: \"Nội Dung 1\",\n              placeholder: \"Nội dung trong trang\",\n              variant: \"outlined\",\n              multiline: true,\n              defaultValue: data.content1,\n              onChange: event => dispatch(changePostActions.updateContent1(event.target.value))\n            }}\n          />\n          <TextArea\n            textField={{\n              variant: \"outlined\",\n              label: \"Nội Dung 2\",\n              placeholder: \"Nội dung trong trang\",\n              multiline: true,\n              defaultValue: data.content2,\n              onChange: event => dispatch(changePostActions.updateContent2(event.target.value))\n            }}\n          />\n          <TextArea\n            textField={{\n              variant: \"outlined\",\n              label: \"Nội Dung 3\",\n              placeholder: \"Nội dung trong trang\",\n              multiline: true,\n              defaultValue: data.content3,\n              onChange: event => dispatch(changePostActions.updateContent3(event.target.value))\n            }}\n          />\n          <div>\n            <Dropzone array={array} uploadNewImages={props.setNewImages}/>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default FieldSet;\n"]},"metadata":{},"sourceType":"module"}